name: Docker Deployment
on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-app:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for app
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app
          tags: |
            type=raw,value=latest-${{ matrix.arch }}
            type=raw,value=${{ github.sha }}-${{ matrix.arch }}

      - name: Build and push app Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./app
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge-and-sign-app:
    runs-on: ubuntu-latest
    needs: build-and-push-app
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest for app
        id: manifest
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:latest \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:latest-arm64
          
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:${{ github.sha }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:${{ github.sha }}-arm64
          
          # Get the digest of the manifest
          DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:latest --format '{{.Manifest.Digest}}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Sign the published app Docker image
        env:
          DIGEST: ${{ steps.manifest.outputs.digest }}
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app@${DIGEST}
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:latest
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-app:${{ github.sha }}

  build-and-push-proxy:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
            arch: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata for proxy
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy
          tags: |
            type=raw,value=latest-${{ matrix.arch }}
            type=raw,value=${{ github.sha }}-${{ matrix.arch }}

      - name: Build and push proxy Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./proxy
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge-and-sign-proxy:
    runs-on: ubuntu-latest
    needs: build-and-push-proxy
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest for proxy
        id: manifest
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:latest \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:latest-arm64
          
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:${{ github.sha }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:${{ github.sha }}-arm64
          
          # Get the digest of the manifest
          DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:latest --format '{{.Manifest.Digest}}')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Sign the published proxy Docker image
        env:
          DIGEST: ${{ steps.manifest.outputs.digest }}
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy@${DIGEST}
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:latest
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-proxy:${{ github.sha }}
